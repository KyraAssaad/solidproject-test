// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: acAbPTRfEA5TzDYgnbrAMH
// Component: tJOiYAtf8Y
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_solid_project_test.module.css"; // plasmic-import: acAbPTRfEA5TzDYgnbrAMH/projectcss
import * as sty from "./PlasmicButton.module.css"; // plasmic-import: tJOiYAtf8Y/css
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: x-P7UYDsQGl/icon

export const PlasmicButton__VariantProps = new Array("colour");

export const PlasmicButton__ArgProps = new Array("cta");

function PlasmicButton__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"a"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__colour_blue]: hasVariant(variants, "colour", "blue"),
        [sty.root__colour_purple]: hasVariant(variants, "colour", "purple"),
        [sty.root__colour_teal]: hasVariant(variants, "colour", "teal")
      })}
    >
      {false ? (
        <IconIcon
          className={classNames(defaultcss.all, sty.svg__nMWt8)}
          role={"img"}
        />
      ) : null}
      {p.renderPlasmicSlot({
        defaultContents: "Get a Pod",
        value: args.cta,
        className: classNames(sty.slotCta)
      })}

      {false ? (
        <IconIcon
          className={classNames(defaultcss.all, sty.svg__uYenD)}
          role={"img"}
        />
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButton__ArgProps,
      internalVariantPropNames: PlasmicButton__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicButton__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButton";
  } else {
    func.displayName = `PlasmicButton.${nodeName}`;
  }
  return func;
}

export const PlasmicButton = Object.assign(
  // Top-level PlasmicButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicButton
    internalVariantProps: PlasmicButton__VariantProps,
    internalArgProps: PlasmicButton__ArgProps
  }
);

export default PlasmicButton;
/* prettier-ignore-end */
